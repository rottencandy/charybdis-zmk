#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define NUM 1
#define SYM 2
#define FUNC 3
#define GAME 4
#define PTR 5
#define SCRL 6
#define SNIP 7

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <150>;
};

/ {
    #include "combos.dtsi"

    keymap {
        compatible = "zmk,keymap";

        Base {
            label = "Base";
            bindings = <
&kp ESC         &kp N1  &kp N2  &kp N3          &kp N4   &kp N5         &kp N6      &kp N7           &kp N8     &kp N9   &kp N0     &kp BSPC
&kp TAB         &kp Q   &kp W   &kp E           &kp R    &kp T          &kp Y       &kp U            &kp I      &kp O    &kp P      &kp BACKSLASH
&kp LCTRL       &kp A   &kp S   &kp D           &kp F    &kp G          &kp H       &kp J            &kp K      &kp L    &kp SEMI   &kp APOS
&kp LEFT_SHIFT  &kp Z   &kp X   &kp C           &kp V    &kp B          &kp N       &kp M            &kp COMMA  &kp DOT  &kp SLASH  &none
                                &mt LGUI ENTER  &mo NUM  &mt LCTRL ESC  &mo SYM     &mt RMETA SPACE
                                                &mo PTR  &mo SCRL       &kp RSHIFT
            >;
        };

        Num {
            label = "Num";
            bindings = <
&kp F12  &kp F1     &kp F2     &kp F3     &kp F4      &kp F5         &kp F6            &kp F7             &kp F8    &kp F9                &kp F10                &kp F11
&trans   &kp N1     &kp N2     &kp N3     &kp N4      &kp N5         &kp N6            &kp N7             &kp N8    &kp N9                &kp N0                 &trans
&trans   &kp EXCL   &kp AT     &kp POUND  &kp DOLLAR  &kp PERCENT    &kp CARET         &kp AMPERSAND      &kp STAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans   &kp EQUAL  &kp MINUS  &kp PLUS   &kp UNDER   &kp PIPE       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LBRC  &kp RBRC              &kp BACKSLASH          &trans
                               &trans     &trans      &trans         &mo FUNC          &trans
                                          &trans      &trans         &trans
            >;
        };

        Sym {
            label = "Sym";
            bindings = <
&trans  &trans       &trans         &trans  &trans    &trans            &trans     &trans    &trans             &trans     &trans         &trans
&trans  &kp GRAVE    &kp LS(GRAVE)  &none   &none     &none             &kp PG_UP  &none     &none              &kp HOME   &kp END        &trans
&trans  &kp TAB      &none          &none   &none     &trans            &kp LEFT   &kp DOWN  &kp UP             &kp RIGHT  &kp BACKSPACE  &trans
&trans  &kp LS(TAB)  &none          &none   &none     &none             &kp PG_DN  &kp APOS  &kp DOUBLE_QUOTES  &kp INS    &kp DEL        &trans
                                    &trans  &mo FUNC  &trans            &trans     &trans
                                            &trans    &trans            &trans
            >;
        };

        Func {
            label = "Func";
            bindings = <
&trans           &trans      &trans             &trans        &trans  &trans      &trans        &trans        &trans        &trans          &trans   &rgb_ug RGB_EFF
&trans           &kp F1      &kp F2             &kp F3        &kp F4  &kp F5      &kp F6        &kp F7        &kp F8        &kp F9          &kp F10  &rgb_ug RGB_BRI
&rgb_ug RGB_TOG  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &trans  &kp CAPS    &out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &trans          &kp F11  &rgb_ug RGB_BRD
&trans           &trans      &trans             &trans        &trans  &to GAME    &out OUT_USB  &trans        &trans        &studio_unlock  &kp F12  &trans
                                                &trans        &trans  &trans      &trans        &trans
                                                              &trans  &trans      &trans
            >;
        };

        Game {
            label = "Game";
            bindings = <
&trans  &trans  &trans  &trans     &trans    &trans    &trans    &trans     &trans    &trans     &trans  &trans
&trans  &trans  &trans  &trans     &trans    &trans    &trans    &trans     &kp UP    &trans     &trans  &trans
&trans  &trans  &trans  &trans     &trans    &trans    &trans    &kp LEFT   &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans     &trans    &trans    &trans    &trans     &trans    &trans     &trans  &trans
                        &kp SPACE  &to BASE  &trans    &to BASE  &kp ENTER
                                   &trans    &trans    &trans
            >;
        };

        Ptr {
            label = "Pointer";
            bindings = <
&trans  &trans    &trans    &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans    &trans    &trans  &trans  &trans  &trans  &mkp MB5   &mkp MB4   &trans     &trans  &trans
&trans  &trans    &trans    &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans
&trans  &mo SNIP  &mo SCRL  &trans  &trans  &trans  &trans  &msc LCLK  &msc RCLK  &msc MCLK  &trans  &trans
                            &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans  &trans
            >;
        };

        Scroll {
            label = "Scroll";
            bindings = <
&trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mo SCRL  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans  &trans  &trans
                                  &trans  &trans  &trans
            >;
        };

        Snipe {
            label = "Snipe";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans
            >;
        };
    };
};
